enum Role {
  User  @map("User")
  Mod   @map("Mod")
  Admin @map("Admin")
}

enum TipoDocumento {
  DNI       @map("DNI")
  Pasaporte @map("Pasaporte")
  Carnet    @map("Carnet de Extranjer√≠a")
  Otro      @map("Otro")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  puntos        Int       @default(0)
  role          Role      @default(User)

  telefono         String?
  fecha_nacimiento DateTime?
  direccion        String?
  documento        String?
  tipo_documento   TipoDocumento @default(DNI)

  pedido   Pedido[]
  account  Account[]
  sessions Session[]

  activo Boolean @default(true)

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@map("usuario")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("cuenta")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sesion")
}

model VerificationToken {
  identifier String   @unique
  token      String
  expires    DateTime

  @@id([identifier])
  @@map("token_verificacion")
}
